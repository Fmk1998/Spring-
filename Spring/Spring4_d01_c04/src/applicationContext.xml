<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 
        bean:是spring工厂帮你new的一个对象（机制：反射机制）
	    class:要new的对象的类型的字符串表示形式（一定全类名）
	    id/name:标识对象的名字，用来获取bean对象用的标识。习惯上，这个名字命名为接口的名字首字母小写
	 -->
	<!-- 实例化bean的方式 -->
	<!-- 1.:默认构造器 
	在实例化的时候，自动调用默认的构造器，相当于Bean1 bean1 =new Bean1();
	-->
	<bean id="bean1" class="com.igeek.Bean1"/>
	<!-- 
	2：静态工厂的方式创建bean 
	用来自己定义一下工厂，让spring的大工厂来调用我们的小工厂，可以将对象的创建权限交给小工厂
	factory-method：工厂的静态方法，在bean的实例化的时候，会自动调用
	-->
	<bean id="bean2" class="com.igeek.Bean2" factory-method="getBean2"/>
	<!-- 3：实例工厂的方式实例化bean -->
	<bean id="bean3Factory" class="com.igeek.Bean3Factory"/>
	<!-- factory-bean相当于ref：引用一个bean对象 -->
	<bean id="bean3" factory-bean="bean3Factory" factory-method="getBean3"/>
	<!-- 4.实现接口FactoryBean的方法
	spring在准备实例化bean的时候，new Bean4FactoryBean,没急着返回bean对象。
	会判断，类型对象是否实现了FactoryBean接口，如果实现了，就调用接口的getObject()方法，得到bean的示例-返回。
	 -->
	<bean id="bean4" class="com.igeek.Bean4FactoryBean"/>
	
	<!-- 
		bean的作用范围
		scope:配置作用范围的，默认值就是singleton单例
	 -->
	<!-- 单例 -->
	<!-- <bean id="singletonBean" class="com.igeek.scope.SingletonBean" scope="singleton"/> -->
	<bean id="singletonBean" class="com.igeek.scope.SingletonBean"/>
	<!-- 多例 -->
	<bean id="prototypeBean" class="com.igeek.scope.PrototypeBean" scope="prototype"/>
	
	<!-- 生命周期调用的两个方法 
	init-method:初始化时（后）调用的，bean中的共有方法即可
	destroy-method:销毁时（前）被调用的。
	-->
	<bean id="lifeCycleBean" class="com.igeek.xmllifecycle.LifeCycleBean" init-method="init" destroy-method="destroy" scope="singleton"/>
	
	<!-- 后处理bean：spring在初始化MyBeanPostProcessor的时候，判断是否实现了BeanPostProcessor，如果实现了，就采用动态代理的方式，对所有的bean对象增强 -->
	<bean class="com.igeek.xmllifecycle.MyBeanPostProcessor"/>
	
	<!-- 构造器注入属性的值 -->
	<bean id="car" class="com.igeek.xmlpropertydi.Car">
		<!--constructor-arg：告诉spring容器，要调用有参构造方法了，不再调用默认的构造方法了  
		new Car(1,"宝马",99999d)
		参数第一组：定位属性
		    * index:根据索引定位属性，0表示第一个位置
			* name：根据属性参数名称定位属性
			* type:根据属性数据类型定位属性
		参数第二组：值
			* value:简单的值，字符串
			* ref:复杂的（由spring容器创建的bean对象）
		-->
		<!-- <constructor-arg index="0" value="1"/> -->
		<constructor-arg index="0" name="id" value="1"/>
		<!-- <constructor-arg name="name" value="宝马1代"/> -->
		<constructor-arg name="name" >
			<value>宝马2代</value>
		</constructor-arg>
		<constructor-arg type="java.lang.Double" value="99999d"/>
	</bean>
	
	<!-- setter方法属性注入:调用默认构造器，相当于new Person() -->
	<bean id="person" class="com.igeek.xmlpropertydi.Person">
		<!-- 
		property：专门进行setter属性注入用的标签 。
			* name:setter方法的属性的名字,例如SetXxx-那么name的属性值为xxx。
			* value:简单的值
			* ref：bean的名字，对象的引用
		-->
		<property name="id" value="1001"/>
		<property name="name" value="Tom"/>
		<!-- <property name="car" ref="car"/> --><!--等同于-->
		<property name="car">
			<ref bean="car"/>
		</property>
	</bean>
	
	<!-- 使用p名称空间简化setter方法属性注入 -->
    <!--
     p:name：简单数据类型的属性注入
     P:car-ref：复杂数据类型（bean）的属性注入
    -->
    <bean id="person2" class="com.igeek.xmlpropertydi.Person" p:id="1002" p:name="关羽" p:car-ref="car"/>
	
	<!-- spEL表达式 -->
    <!-- car.name相当于car.getName() -->
    <bean id="person3" class="com.igeek.xmlpropertydi.Person" p:id="#{car.id}" p:name="#{car.name}" p:car="#{car}"/>
	<!-- spEL表达式 -->
    <!-- car.id相当于car.getId() -->
    <bean id="person4" class="com.igeek.xmlpropertydi.Person" p:id="#{1+1}" p:name="#{'Jack'.toUpperCase()}" p:car="#{car}"/>
    
    <!-- 集合的属性注入 -->
	<bean id="collectionBean" class="com.igeek.xmlpropertydi.CollectionBean">
		<!-- setter -->
		<!-- list -->
		<property name="list">
			<list>
				<value>Tom</value>
				<value>Jack</value>
			</list>
		</property>
		<!-- set -->
		<property name="set">
			<set>
				<value>12</value>
				<value>15</value>
			</set>
		</property>
		<!-- map -->
		<property name="map">
			<map>
				<entry key="name" value="张三"/>
				<entry key="age" value="22"/>
                <entry key="car" value-ref="car"></entry>
			</map>
		</property>
		<!-- properties -->
		<property name="properties">
			<props>
				<prop key="name">李四</prop>
				<prop key="age">33</prop>
			</props>
		</property>
	</bean>
    
</beans>